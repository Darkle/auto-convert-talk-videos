{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/appMain.lsc","webpack:///./app/ffmpeg.lsc","webpack:///./app/logging.lsc","webpack:///external \"child_process\"","webpack:///external \"chokidar\"","webpack:///external \"crypto\"","webpack:///external \"del\"","webpack:///external \"delay\"","webpack:///external \"ffmkek\"","webpack:///external \"folktale/maybe\"","webpack:///external \"path\"","webpack:///external \"util\"","webpack:///external \"winston\"","webpack:///external \"winston-daily-rotate-file\""],"names":["crypto","randomBytes","toString","chokidar","watch","dirToWatch","ignored","persistent","awaitWriteFinish","stabilityThreshold","pollInterval","ignoreInitial","watcher","on","shouldConvertVideo","filePath","Maybe","Nothing","logger","info","tenSecondsAsMilliseconds","then","uniqueString","catch","error","endsWith","includes","process","execFile","srcFilePath","FFmkek","addInput","addOption","speed","write","generateOutputFilePath","path","basename","extname","fileBaseName","slice","lastIndexOf","fileExtension","join","outputPath","outputFileName","convertVideo","winston","transports","DailyRotateFile","filename","dirname","datePattern","maxSize","maxFiles","fileTransport","push","Console","createLogger","level","format","prettyPrint"],"mappings":"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","file":"appMain-compiled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/appMain.lsc\");\n","import crypto from 'crypto'\r\n\r\nimport chokidar from 'chokidar'\r\nimport Maybe from 'folktale/maybe'\r\nimport delay from 'delay'\r\nimport del from 'del'\r\n\r\n// import { MaybeGetPath } from './utils.lsc'\r\nimport { dirToWatch } from '../config.json'\r\nimport { convertVideo } from './ffmpeg.lsc'\r\nimport { logger } from './logging.lsc'\r\n\r\ntenSecondsAsMilliseconds = 10000\r\nuniqueString = crypto.randomBytes(6).toString('hex')\r\n\r\nwatcher = chokidar.watch(dirToWatch, {\r\n  ignored: /(^|[\\/\\\\])\\../,\r\n  persistent: true,\r\n  awaitWriteFinish: {\r\n    stabilityThreshold: 6000,\r\n    pollInterval: 100,\r\n  },\r\n  ignoreInitial: true,\r\n})\r\n\r\nwatcher\r\n  .on('add', filePath ->\r\n    if !shouldConvertVideo(filePath): return Maybe.Nothing()\r\n    logger.info(`${ filePath } has been added to folder. \\nConversion will start in a moment...`)\r\n    delay(tenSecondsAsMilliseconds)\r\n      .then(() -> convertVideo(filePath, uniqueString))\r\n      .then(() -> logger.info('finished conversion'))\r\n      .then(() -> del([filePath])) //move original file to trash\r\n      .then(() -> logger.info('deleted original file'))\r\n      .catch(logger.error)\r\n  )\r\n\r\n/*****\r\n* The file will have .part if it's a jDownloader download, so we need to ignore that\r\n* untill the download completes.\r\n*\r\n* We also need to check for a unique string, becuase once ffmpeg has finished converting,\r\n* the new converted file shows up which triggers the watcher. So we need to ignore the new\r\n* converted file as its already converted.\r\n*/\r\nshouldConvertVideo(filePath:string):boolean ->\r\n  !filePath.endsWith('.part') && !filePath.includes(uniqueString)\r\n\r\nprocess.on('unhandledRejection', logger.error)\r\nprocess.on('uncaughtException', logger.error)\r\n","import { promisify } from 'util'\r\nimport { execFile } from 'child_process'\r\nimport path from 'path'\r\n\r\nimport FFmkek from 'ffmkek'\r\n\r\nimport { speed, dirToWatch as outputPath } from '../config.json'\r\n\r\npExecFile = promisify(execFile)\r\n\r\nconvertVideo(srcFilePath:string, uniqueString:string):Promise ->\r\n  new FFmkek()\r\n    .addInput(srcFilePath)\r\n    .addOption('-filter:v', `setpts=PTS/${ speed }`)\r\n    .addOption('-filter:a', `atempo=${ speed }`)\r\n    .addOption('-threads', `1`)\r\n    .write(generateOutputFilePath(srcFilePath, uniqueString))\r\n\r\n// convertVideo(srcFilePath:string, uniqueString:string):Promise ->\r\n//   pExecFile('ffmpeg', generateFFmpegParams(srcFilePath, uniqueString))\r\n//     .then()\r\n\r\n\r\ngenerateOutputFilePath(srcFilePath:string, uniqueString:string):string ->\r\n  fileBaseName = path.basename(srcFilePath)\r\n  fileExtension = path.extname(fileBaseName)\r\n  outputFileName = fileBaseName.slice(0, fileBaseName.lastIndexOf(fileExtension)) +\r\n    `-converted-${ uniqueString }` + fileExtension\r\n\r\n  path.join(outputPath, outputFileName)\r\n\r\n// generateFFmpegCommand(srcFilePath:string, uniqueString:string):string ->\r\n//   `START /BELOWNORMAL ffmpeg -i ` +\r\n//   srcFilePath +\r\n//   ` -filter:v setpts=PTS/${ speed }` +\r\n//   ` -filter:a atempo=${ speed }` +\r\n//   ` -threads 1 ` +\r\n//   generateOutputFilePath(srcFilePath, uniqueString)\r\n\r\n// generateFFmpegParams(srcFilePath:string, uniqueString:string):Array<string> ->\r\n//   [\r\n//     '-i',\r\n//     srcFilePath,\r\n//     '-filter:v',\r\n//     `\"setpts=PTS/${ speed }\"`,\r\n//     '-filter:a',\r\n//     `\"atempo=${ speed }\"`,\r\n//     `-threads`,\r\n//     `1`,\r\n//     generateOutputFilePath(srcFilePath, uniqueString)\r\n//   ]\r\n\r\nexport {\r\n  convertVideo\r\n}\r\n","import winston from 'winston'\r\nimport 'winston-daily-rotate-file'\r\n\r\nfileTransport = new (winston.transports.DailyRotateFile)({\r\n  filename: 'auto-convert-talk-videos-%DATE%.log',\r\n  dirname: 'logs'\r\n  datePattern: 'YYYY-MM-DD-HH',\r\n  maxSize: '20m',\r\n  maxFiles: 5\r\n})\r\n\r\ntransports = [\r\n  fileTransport,\r\n]\r\n\r\nif ISDEV: transports.push(new winston.transports.Console())\r\n\r\nlogger = winston.createLogger({\r\n  level: 'info',\r\n  format: if ISDEV: winston.format.prettyPrint() else: winston.format.json()\r\n  transports\r\n})\r\n\r\nexport {\r\n  logger\r\n}\r\n","module.exports = require(\"child_process\");","module.exports = require(\"chokidar\");","module.exports = require(\"crypto\");","module.exports = require(\"del\");","module.exports = require(\"delay\");","module.exports = require(\"ffmkek\");","module.exports = require(\"folktale/maybe\");","module.exports = require(\"path\");","module.exports = require(\"util\");","module.exports = require(\"winston\");","module.exports = require(\"winston-daily-rotate-file\");"],"sourceRoot":""}