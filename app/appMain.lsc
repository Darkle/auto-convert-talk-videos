import chokidar from 'chokidar'
import Maybe from 'folktale/maybe'

import { dirToWatch } from '../config.json'
import { addFileToConversionQueue, convertVideo } from './ffmpeg.lsc'
import { logger } from './logging.lsc'
import { getUniqueString } from './utils.lsc'

watcher = chokidar.watch(dirToWatch, {
  ignored: /(^|[\/\\])\../, // ignore dotfiles
  persistent: true,
  awaitWriteFinish: {
    stabilityThreshold: ISDEV ? 2000 : 6000,
    pollInterval: 100,
  },
  ignoreInitial: true,
})

watcher
  .on('add', filePath ->  // eslint-disable-line fp/no-nil
    match shouldConvertVideo(filePath):
      | false: Maybe.Nothing()
      | true:
        addFileToConversionQueue(filePath)
        convertVideo()
  )

/*****
* The file will have .part or .dashVideo or .dashAudio if it's a jDownloader download,
* so we need to ignore that until the download completes.
*
* We also need to check for a unique string, becuase once ffmpeg has finished converting,
* the new converted file shows up which triggers the watcher. So we need to ignore the new
* converted file as its already converted.
*/
shouldConvertVideo(filePath:string):boolean ->
  !filePath.endsWith('.part') &&
    !filePath.endsWith('.dashVideo') &&
    !filePath.endsWith('.dashAudio') &&
    !filePath.includes(getUniqueString())

process.on('unhandledRejection', logger.error)
process.on('uncaughtException', logger.error)
