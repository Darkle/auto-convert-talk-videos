import { spawn } from 'child_process'
import path from 'path'

import Maybe from 'folktale/maybe'
import del from 'del'

import { logger } from './logging.lsc'
import { noop, getUniqueString } from './utils.lsc'
import { speed, dirToWatch as outputPath } from '../config.json'

// https://docs.microsoft.com/en-us/windows/desktop/CIMWin32Prov/setpriority-method-in-class-win32-process
belowNormalProcessPriorityId = 16384
ffmpegDefaultParams = [
  '-filter:v',
  `setpts=PTS/${ speed }`,
  '-filter:a',
  `atempo=${ speed }`,
  `-threads`,
  `1`,
]
queue = []
let conversionInProgress = false  // eslint-disable-line fp/no-let

addFileToConversionQueue(filePath:string):Maybe ->
  queue.push(filePath)
  Maybe.Nothing()

convertVideo():Maybe ->
    if !conversionInProgress && queue.length > 0:
      logger.info(`Converting ${ path.basename(queue[0]) }`)
      now conversionInProgress = true   // eslint-disable-line fp/no-mutation
      spawnedFFmpeg = spawn('ffmpeg', generateFFmpegParams(queue[0]))
      /*****
      * For some reason if you omit the stderr/stdout listeners sometimes ffmpeg
      * wont exit properly. ¯\_(ツ)_/¯
      */
      spawnedFFmpeg.stderr.on('data', noop)
      spawnedFFmpeg.stdout.on('data', noop)
      spawnedFFmpeg.on('exit', cleanUpAndStartNewVideoConversion)
      lowerFFmpegProcessPriority(spawnedFFmpeg.pid)
    Maybe.Nothing()

cleanUpAndStartNewVideoConversion(exitCode:number):Maybe ->
  logger.info(`spawnedFFmpeg exited with code ${ exitCode }`)
  logger.info(`Finished converting ${ path.basename(queue[0]) }`)
  deleteOriginalFile(queue[0])
  queue.shift()
  now conversionInProgress = false   // eslint-disable-line fp/no-mutation
  convertVideo()
  Maybe.Nothing()

/*****
* Based on https://github.com/soyuka/renice/blob/master/index.js
*/
lowerFFmpegProcessPriority(pid:number) ->
  spawn(
    'cmd.exe',
    [
      '/c',
      `wmic process where processid=${ pid } CALL setpriority ${ belowNormalProcessPriorityId }`,
    ]
  )
  Maybe.Nothing()

generateOutputFilePath(srcFilePath:string):string ->
  fileBaseName = path.basename(srcFilePath)
  fileExtension = path.extname(fileBaseName)
  outputFileName = fileBaseName.slice(0, fileBaseName.lastIndexOf(fileExtension)) +
    `-converted-${ getUniqueString() }` + fileExtension

  path.join(outputPath, outputFileName)

generateFFmpegParams(srcFilePath:string):Array<string> ->
  [
    '-i',
    srcFilePath,
    ...ffmpegDefaultParams,
    generateOutputFilePath(srcFilePath, getUniqueString())
  ]

deleteOriginalFile(origFilePath:string):Maybe ->
  del([origFilePath])
    .then(()-> logger.info(`Deleted orignal ${ path.basename(origFilePath) } file`))
    .catch(logger.error)
  Maybe.Nothing()

export {
  convertVideo,
  addFileToConversionQueue,
}
